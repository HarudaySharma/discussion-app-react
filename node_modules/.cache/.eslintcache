[{"/home/haru_d/Desktop/discussion-app/src/index.js":"1","/home/haru_d/Desktop/discussion-app/src/App.js":"2","/home/haru_d/Desktop/discussion-app/src/reportWebVitals.js":"3","/home/haru_d/Desktop/discussion-app/src/components/App_Components/leftPane.js":"4","/home/haru_d/Desktop/discussion-app/src/components/App_Components/rightPane.js":"5","/home/haru_d/Desktop/discussion-app/src/components/Left_Pane_Components/QuestionsList.js":"6","/home/haru_d/Desktop/discussion-app/src/components/Left_Pane_Components/TopBar.js":"7","/home/haru_d/Desktop/discussion-app/src/components/Right_Pane_Components/QuestionAndResponse.js":"8","/home/haru_d/Desktop/discussion-app/src/components/Right_Pane_Components/QuestionForm.js":"9"},{"size":535,"mtime":1698885015812,"results":"10","hashOfConfig":"11"},{"size":3730,"mtime":1699886755719,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1698885015812,"results":"13","hashOfConfig":"11"},{"size":839,"mtime":1699885014976,"results":"14","hashOfConfig":"11"},{"size":615,"mtime":1699227005821,"results":"15","hashOfConfig":"11"},{"size":1357,"mtime":1699884989714,"results":"16","hashOfConfig":"11"},{"size":1479,"mtime":1699928016135,"results":"17","hashOfConfig":"11"},{"size":7251,"mtime":1699865826563,"results":"18","hashOfConfig":"11"},{"size":1508,"mtime":1699865710736,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"djt3a2",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/home/haru_d/Desktop/discussion-app/src/index.js",[],[],["49"],"/home/haru_d/Desktop/discussion-app/src/App.js",["50"],[],"/home/haru_d/Desktop/discussion-app/src/reportWebVitals.js",[],[],"/home/haru_d/Desktop/discussion-app/src/components/App_Components/leftPane.js",[],[],"/home/haru_d/Desktop/discussion-app/src/components/App_Components/rightPane.js",[],[],"/home/haru_d/Desktop/discussion-app/src/components/Left_Pane_Components/QuestionsList.js",["51"],[],"/home/haru_d/Desktop/discussion-app/src/components/Left_Pane_Components/TopBar.js",["52"],[],"/home/haru_d/Desktop/discussion-app/src/components/Right_Pane_Components/QuestionAndResponse.js",["53","54","55","56","57"],[],"import React, { useEffect, useState } from \"react\";\n\n\n// will fetch the questionObject from the Local Storage\nconst fetchObjectFromLS = (key) => {\n    if (!localStorage.getItem(\"discussion-app\")) {\n        return null;\n    }\n    let parentArray = JSON.parse(localStorage.getItem(\"discussion-app\"))\n\n    //finding the subject Object which contains all the questions regarding the subject\n    let subIndex = parentArray.findIndex((obj) => {\n        return (obj.Subject === key.subject);\n    });\n    let subjectObj = parentArray[subIndex];\n    // questionArray traversal to find the question \n\n    let questionIndex = subjectObj.Questions.findIndex((obj) => obj.question === key.question)\n\n    let questionObj = subjectObj.Questions[questionIndex];\n    // this will return the questionObj which will have the responses (question and responses)\n\n    return questionObj;\n}\n\nfunction getSubjectIndex(subject, array) {\n    let subIndex = array.findIndex((obj) => {\n        return (obj.Subject === subject);\n    });\n    return subIndex;\n}\n\nfunction getQuestionIndex(question, array) {\n    let questionIndex = array.findIndex((obj) => {\n        return (obj.question === question)\n    });\n    return questionIndex;\n}\n\n// will update the question object in local storage by  adding the added responses to the questionObject  \nfunction updateObjectInLocalStorage(subject, questionObject) {\n    let parentArray = JSON.parse(localStorage.getItem('discussion-app'))\n\n    let subIndex = getSubjectIndex(subject, parentArray);\n    let SubjectObj = parentArray[subIndex];\n\n\n    // finding the QuestionObject\n    let questionIndex = getQuestionIndex(questionObject.question, SubjectObj.Questions);\n\n    // will update the Questions array in the SubjectObj (new QuestionAdded into the Questions\n    // removing the old)\n    SubjectObj.Questions.splice(questionIndex, 1, questionObject);\n\n    // updating the SubjectObject in the parentArray\n    parentArray.splice(subIndex, 1, SubjectObj);\n\n    localStorage.setItem('discussion-app', JSON.stringify(parentArray));\n}\n\nfunction deleteObjectInLocalStorage(subject, question) {\n    let parentArray = JSON.parse(localStorage.getItem('discussion-app'));\n\n    let subIndex = getSubjectIndex(subject, parentArray);\n    let questionIndex = getQuestionIndex(question, parentArray[subIndex].Questions);\n\n    parentArray[subIndex].Questions.splice(questionIndex, 1);\n    if (parentArray[subIndex].Questions.length == 0) {\n        parentArray.splice(subIndex, 1);\n    }\n\n    localStorage.setItem('discussion-app', JSON.stringify(parentArray));\n\n}\n\n//responseKey = {subject, question}\nfunction QuestionAndResponse({ responseKey, handleResolveClick }) {\n\n    // questionObject = { question,  responses[]}\n    const [questionObject, setQuestionObject] = useState(() => fetchObjectFromLS(responseKey));\n\n\n    const [responses, setResponses] = useState(() => fetchResponseArray(questionObject));\n\n    // will be used to fetch new responses when response Key changes \n    const [prevResponseKey, setPreviousResponseKey] = useState(null)\n\n    // will fetch all the responses from the questionObject\n    function fetchResponseArray() {\n        // console.log('fetchResponserender')\n        return (questionObject.hasOwnProperty('responses') ? questionObject.responses : [])\n    }\n\n    useEffect(() => {\n        setQuestionObject(fetchObjectFromLS(responseKey));\n    }, [responseKey])\n\n    useEffect(() => {\n        if (responseKey !== prevResponseKey) {\n            setResponses(fetchResponseArray(questionObject));\n            setPreviousResponseKey(responseKey);\n        }\n        updateObjectInLocalStorage(responseKey.subject, questionObject);\n    }, [questionObject]);\n\n\n    function Question() {\n        function onResolve() {\n            deleteObjectInLocalStorage(responseKey.subject, questionObject.question);\n            handleResolveClick();\n        }\n        return (\n            // the values for heading and Paragraph provided by the props\n            <div className=\"question-resolve-container\">\n                <h1>{responseKey.subject}</h1>\n                <p>{questionObject.question}</p>\n                <button\n                    className=\"resolve-btn buttons\"\n                    onClick={onResolve}\n                >\n                    Resolve\n                </button>\n            </div>\n        )\n    }\n    function Response() {\n\n        function ResponseTemplate(props) {\n            return (\n                <div className=\"response\">\n                    <h4>{props.name}</h4>\n                    <p>{props.comment}</p>\n                </div>\n            )\n        }\n        return (\n            <div className=\"response-container\">\n                <h1>Responses</h1>\n                <div className=\"response-list\">\n                    {responses.length == 0 && <div>No Responses</div>}\n                    {\n                        responses.map((response, index) => {\n                            return <ResponseTemplate key={index} name={response.Name} comment={response.Comment} />\n                        }\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    function AddResponse() {\n\n        const [name, setName] = useState('');\n        const [comment, setComment] = useState('');\n\n        const handleRespondSubmit = () => {\n            if (name == '' || comment == '') return;\n\n            let newResponse = {\n                Name: name,\n                Comment: comment\n            }\n            setResponses([...responses, newResponse]);\n\n            // to add new responses to the question object\n            // questionObject = {\n            //     question:\n            //     responses: []\n            // }\n            // added the new response in the response array of the question\n            setQuestionObject({ ...questionObject, responses: [...responses, newResponse] });\n\n            setName('');\n            setComment('');\n        }\n        // useEffect(() => {\n        //     setQuestionObject(() => {\n        //         return {...questionObject, responseArray: responses}\n        //     })\n        // }, [responses])\n\n        // will get executed everytime the questionObject is changed (new responses are added to the object)\n\n\n        return (\n            <div className=\"add-response-container\">\n                <h1>Add Response</h1>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    required=\"required\"\n                />\n                <textarea\n                    placeholder=\"Enter Comment\"\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value)}\n                    required=\"required\"\n                >\n                </textarea>\n                <button className=\"submit-btn buttons\" onClick={handleRespondSubmit} >\n                    Submit\n                </button>\n            </div>\n        )\n    }\n    return (\n        <div className=\"question-and-response\">\n            <Question />\n            <Response />\n            <AddResponse />\n        </div>\n    )\n}\n\nexport default QuestionAndResponse;\n\n\n","/home/haru_d/Desktop/discussion-app/src/components/Right_Pane_Components/QuestionForm.js",[],[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":17,"nodeType":"62","messageId":"63","endLine":4,"endColumn":28},{"ruleId":"60","severity":1,"message":"64","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":27,"column":12,"nodeType":"67","endLine":27,"endColumn":24,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":68,"column":48,"nodeType":"71","messageId":"72","endLine":68,"endColumn":50},{"ruleId":"65","severity":1,"message":"73","line":104,"column":8,"nodeType":"67","endLine":104,"endColumn":24,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"70","line":140,"column":39,"nodeType":"71","messageId":"72","endLine":140,"endColumn":41},{"ruleId":"69","severity":1,"message":"70","line":158,"column":22,"nodeType":"71","messageId":"72","endLine":158,"endColumn":24},{"ruleId":"69","severity":1,"message":"70","line":158,"column":39,"nodeType":"71","messageId":"72","endLine":158,"endColumn":41},"no-new-object",["75"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'debouncedSearch'. Either include it or remove the dependency array.","ArrayExpression",["76"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fetchResponseArray', 'prevResponseKey', and 'responseKey'. Either include them or remove the dependency array. If 'setPreviousResponseKey' needs the current value of 'responseKey', you can also switch to useReducer instead of useState and read 'responseKey' in the reducer.",["77"],"no-object-constructor",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [debouncedSearch, inputValue]",{"range":"82","text":"83"},"Update the dependencies array to be: [fetchResponseArray, prevResponseKey, questionObject, responseKey]",{"range":"84","text":"85"},[902,914],"[debouncedSearch, inputValue]",[3664,3680],"[fetchResponseArray, prevResponseKey, questionObject, responseKey]"]